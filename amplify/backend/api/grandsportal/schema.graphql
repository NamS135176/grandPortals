# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type Query {
  settingCognitoPassword(input: settingCognitoPasswordInput!): AWSJSON @function(name: "settingCognitoPassword-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
  ])

  publishPasswordResetLink(email: String!): AWSJSON @function(name: "publishPasswordResetLink-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
  ])

  createForceResetPassword(email: String!): AWSJSON @function(name: "createForceResetPassword-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
  ])

  checkLinkValidation(id: ID!): AWSJSON @function(name: "checkLinkValidation-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
  ])

  getNextDocumentId: AWSJSON @function(name: "getNextDocumentId-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  getNextHistoryId: AWSJSON @function(name: "getNextHistoryId-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  getNextBukkenId: AWSJSON @function(name: "getNextBukkenId-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  getNextOtherObjectId: AWSJSON @function(name: "getNextOtherObjectId-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  getNextInformationId: AWSJSON @function(name: "getNextInformationId-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  getNextInformationListSendId: AWSJSON @function(name: "getNextInformationListSendId-${env}")
  @auth(rules: [
    { allow: public, provider: iam }
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  withdrawalRequest(name: String!): AWSJSON @function(name: "withdrawalRequest-${env}")
  @auth(rules: [
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])

  publishInformationZipFile(folder: String!, zipFileName: String!): AWSJSON @function(name: "publishInformationZipFile-${env}")
  @auth(rules: [
    { allow: groups, groups: ["support", "agentNormal", "agentGrands"] }
  ])
}

type User
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: owner, ownerField: "id"}
            {allow: private, provider: iam, operations: [create, update, read]}
            {allow: groups, groups: ["agentNormal", "agentGrands"], operations: [read] }
        ]
    ) {
    id: ID! @primaryKey
    email: String @index(name: "GSI-email", queryField: "queryUserByEmail")
    name: String
    name_kana: String
    receive_notification_email_flag: Boolean!
    delete_flag: Boolean!
    last_login_date: AWSDateTime!
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryUserBySort")
    createdAt: AWSDateTime!
}

type CS
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    email: String! @primaryKey
    delete_flag: Boolean!
    last_login_date: AWSDateTime!
}

type UserTempResetPassword
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support", "agentNormal", "agentGrands"]}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    email: String!
    delete_flag: Boolean!
    createdAt: AWSDateTime!
        @index(
            name: "byCreatedAt"
            queryField: "queryUserTempResetPasswordByCreatedAt"
        )
    ttl: AWSTimestamp
}

type Bukken
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: owner, ownerField: "user_id"}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    s_object_id: String
    bukken_no: String
        @index(
            name: "GSI-bukkenNo"
            sortKeyFields: "user_id"
            queryField: "queryBukkensByBukkenNo"
        )
    user_id: ID! @index(name: "GSI-userId", queryField: "queryBukkensByUserId")
    address: String
    bukken_kind: String!
    floor_plan: String
    shinchiku_date: AWSDateTime
    remarks: String
    delete_flag: Int!
    otherObjects: [OtherObject] @hasMany(indexName: "GSI-bukkenId", fields: ["id"])
    documents: [Document] @hasMany(indexName: "GSI-bukkenId", fields: ["id"])
    histories: [History] @hasMany(indexName: "GSI-bukkenId", fields: ["id"])
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryBukkenBySort")
    createdAt: AWSDateTime!
}

type OtherObject
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: owner, ownerField: "user_id"}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    bukken_id: ID
        @index(name: "GSI-bukkenId", queryField: "queryOtherObjectByBukkenId")
    bukken: Bukken @belongsTo(fields: ["bukken_id"])
    user_id: ID!
    object_kind: String!
    room_id: ID
        @index(name: "GSI-roomId", queryField: "queryOtherObjectByRoomId")
    field_kind: String!
    field_list: String!
    delete_flag: Int!
    object_kind_updatedAt: String!
        @index(
            name: "byObjectKindAndUpdatedAt"
            queryField: "queryOtherObjectByObjectKindAndUpdatedAt"
        )
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryOtherObjectBySort")
    createdAt: AWSDateTime!
}

type Document
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: owner, ownerField: "user_id"}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    bukken_id: ID
        @index(name: "GSI-bukkenId", queryField: "queryDocumentByBukkenId")
    bukken: Bukken @belongsTo(fields: ["bukken_id"])
    user_id: ID!
    other_object_id: ID
        @index(
            name: "GSI-otherObjectId"
            queryField: "queryDocumentByOtherObjectId"
        )
    object_kind: String!
    orignal_file_name: String!
    s3_file_name: String!
    overview: String!
    delete_flag: Int!
    object_kind_createdAt: String!
        @index(
            name: "byObjectKindAndCreatedAt"
            sortKeyFields: ["object_kind", "bukken_id"]
            queryField: "queryDocumentByObjectKindAndCreatedAt"
        )
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryDocumentBySort")
    createdAt: AWSDateTime!
}

type History
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: owner, ownerField: "user_id"}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    bukken_id: ID
        @index(name: "GSI-bukkenId", queryField: "queryHistoryByBukkenId")
    bukken: Bukken @belongsTo(fields: ["bukken_id"])
    user_id: ID!
    other_object_id: ID
        @index(
            name: "GSI-otherObjectId"
            queryField: "queryHistoryByOtherObjectId"
        )
    object_kind: String!
    remarks: String!
    overview: String!
    delete_flag: Int!
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryHistoryBySort")
    createdAt: AWSDateTime!
        @index(
            name: "byCreatedAt"
            sortKeyFields: ["object_kind", "bukken_id"]
            queryField: "querHistoryCreatedAt"
        )
}

type Information
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: groups, groups: ["agentNormal", "agentGrands"], operations: [read] }
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    subject: String
    content: String
    scheduled_delivery_date: AWSDateTime
    important_info_flag: Int
    draft_flag: Int
    delete_flag: Int!
    informaionListSends: [InformationListSend] @hasMany(indexName: "GSI-informationId", fields: ["id"])
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryInformationBySort")
    createdAt: AWSDateTime!
}

type InformationListSend
    @model
    @auth(
        rules: [
            {allow: groups, groups: ["support"]}
            {allow: owner, ownerField: "user_id"}
            {allow: private, provider: iam, operations: [create, update, read]}
        ]
    ) {
    id: ID! @primaryKey
    information_id: ID!  @index(name: "GSI-informationId", queryField: "queryInformationListSendByInformationId")
    information: Information @belongsTo(fields: ["information_id"])
    user_id: ID! @index(name: "GSI-userId", queryField: "queryInformationListSendByUserId")
    email: String
    name: String!
    name_kana: String!
    withdrawal_flag: Boolean!
    receive_notification_email_flag: Boolean!
    last_user_read: AWSDateTime
    sort: Int! @index(name: "GSI-sort", sortKeyFields: ["createdAt"], queryField: "queryInformationListSendBySort")
    createdAt: AWSDateTime!
}

input settingCognitoPasswordInput {
  password: String!
  idTemp: String!
}
